// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/envoy/tcp/metadata_exchange/config/metadata_exchange.proto

#include "src/envoy/tcp/metadata_exchange/config/metadata_exchange.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace envoy {
namespace tcp {
namespace metadataexchange {
namespace config {
class MetadataExchangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetadataExchange> _instance;
} _MetadataExchange_default_instance_;
}  // namespace config
}  // namespace metadataexchange
}  // namespace tcp
}  // namespace envoy
static void InitDefaultsscc_info_MetadataExchange_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::envoy::tcp::metadataexchange::config::_MetadataExchange_default_instance_;
    new (ptr) ::envoy::tcp::metadataexchange::config::MetadataExchange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::envoy::tcp::metadataexchange::config::MetadataExchange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MetadataExchange_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MetadataExchange_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::envoy::tcp::metadataexchange::config::MetadataExchange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::envoy::tcp::metadataexchange::config::MetadataExchange, protocol_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::envoy::tcp::metadataexchange::config::MetadataExchange)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::envoy::tcp::metadataexchange::config::_MetadataExchange_default_instance_),
};

const char descriptor_table_protodef_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n>src/envoy/tcp/metadata_exchange/config"
  "/metadata_exchange.proto\022!envoy.tcp.meta"
  "dataexchange.config\"$\n\020MetadataExchange\022"
  "\020\n\010protocol\030\001 \001(\tB\\\n/io.envoyproxy.envoy"
  ".tcp.metadataexchange.configB\025MetadataEx"
  "changeProtoP\001Z\020MetadataExchangeb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto_sccs[1] = {
  &scc_info_MetadataExchange_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto_once;
static bool descriptor_table_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto = {
  &descriptor_table_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto_initialized, descriptor_table_protodef_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto, "src/envoy/tcp/metadata_exchange/config/metadata_exchange.proto", 239,
  &descriptor_table_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto_once, descriptor_table_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto_sccs, descriptor_table_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto::offsets,
  file_level_metadata_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto, 1, file_level_enum_descriptors_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto, file_level_service_descriptors_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto), true);
namespace envoy {
namespace tcp {
namespace metadataexchange {
namespace config {

// ===================================================================

void MetadataExchange::InitAsDefaultInstance() {
}
class MetadataExchange::_Internal {
 public:
};

MetadataExchange::MetadataExchange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:envoy.tcp.metadataexchange.config.MetadataExchange)
}
MetadataExchange::MetadataExchange(const MetadataExchange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocol().empty()) {
    protocol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
  // @@protoc_insertion_point(copy_constructor:envoy.tcp.metadataexchange.config.MetadataExchange)
}

void MetadataExchange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MetadataExchange_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto.base);
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MetadataExchange::~MetadataExchange() {
  // @@protoc_insertion_point(destructor:envoy.tcp.metadataexchange.config.MetadataExchange)
  SharedDtor();
}

void MetadataExchange::SharedDtor() {
  protocol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MetadataExchange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetadataExchange& MetadataExchange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MetadataExchange_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto.base);
  return *internal_default_instance();
}


void MetadataExchange::Clear() {
// @@protoc_insertion_point(message_clear_start:envoy.tcp.metadataexchange.config.MetadataExchange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* MetadataExchange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string protocol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_protocol(), ptr, ctx, "envoy.tcp.metadataexchange.config.MetadataExchange.protocol");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetadataExchange::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:envoy.tcp.metadataexchange.config.MetadataExchange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string protocol = 1;
  if (this->protocol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol().data(), static_cast<int>(this->_internal_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "envoy.tcp.metadataexchange.config.MetadataExchange.protocol");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_protocol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:envoy.tcp.metadataexchange.config.MetadataExchange)
  return target;
}

size_t MetadataExchange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:envoy.tcp.metadataexchange.config.MetadataExchange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string protocol = 1;
  if (this->protocol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetadataExchange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:envoy.tcp.metadataexchange.config.MetadataExchange)
  GOOGLE_DCHECK_NE(&from, this);
  const MetadataExchange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetadataExchange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:envoy.tcp.metadataexchange.config.MetadataExchange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:envoy.tcp.metadataexchange.config.MetadataExchange)
    MergeFrom(*source);
  }
}

void MetadataExchange::MergeFrom(const MetadataExchange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:envoy.tcp.metadataexchange.config.MetadataExchange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.protocol().size() > 0) {

    protocol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
}

void MetadataExchange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:envoy.tcp.metadataexchange.config.MetadataExchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetadataExchange::CopyFrom(const MetadataExchange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:envoy.tcp.metadataexchange.config.MetadataExchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetadataExchange::IsInitialized() const {
  return true;
}

void MetadataExchange::InternalSwap(MetadataExchange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  protocol_.Swap(&other->protocol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MetadataExchange::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace config
}  // namespace metadataexchange
}  // namespace tcp
}  // namespace envoy
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::envoy::tcp::metadataexchange::config::MetadataExchange* Arena::CreateMaybeMessage< ::envoy::tcp::metadataexchange::config::MetadataExchange >(Arena* arena) {
  return Arena::CreateInternal< ::envoy::tcp::metadataexchange::config::MetadataExchange >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
