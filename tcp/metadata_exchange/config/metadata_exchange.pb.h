// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/envoy/tcp/metadata_exchange/config/metadata_exchange.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto;
namespace envoy {
namespace tcp {
namespace metadataexchange {
namespace config {
class MetadataExchange;
class MetadataExchangeDefaultTypeInternal;
extern MetadataExchangeDefaultTypeInternal _MetadataExchange_default_instance_;
}  // namespace config
}  // namespace metadataexchange
}  // namespace tcp
}  // namespace envoy
PROTOBUF_NAMESPACE_OPEN
template<> ::envoy::tcp::metadataexchange::config::MetadataExchange* Arena::CreateMaybeMessage<::envoy::tcp::metadataexchange::config::MetadataExchange>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace envoy {
namespace tcp {
namespace metadataexchange {
namespace config {

// ===================================================================

class MetadataExchange :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:envoy.tcp.metadataexchange.config.MetadataExchange) */ {
 public:
  MetadataExchange();
  virtual ~MetadataExchange();

  MetadataExchange(const MetadataExchange& from);
  MetadataExchange(MetadataExchange&& from) noexcept
    : MetadataExchange() {
    *this = ::std::move(from);
  }

  inline MetadataExchange& operator=(const MetadataExchange& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetadataExchange& operator=(MetadataExchange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MetadataExchange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetadataExchange* internal_default_instance() {
    return reinterpret_cast<const MetadataExchange*>(
               &_MetadataExchange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MetadataExchange& a, MetadataExchange& b) {
    a.Swap(&b);
  }
  inline void Swap(MetadataExchange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetadataExchange* New() const final {
    return CreateMaybeMessage<MetadataExchange>(nullptr);
  }

  MetadataExchange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetadataExchange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetadataExchange& from);
  void MergeFrom(const MetadataExchange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetadataExchange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "envoy.tcp.metadataexchange.config.MetadataExchange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto);
    return ::descriptor_table_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolFieldNumber = 1,
  };
  // string protocol = 1;
  void clear_protocol();
  const std::string& protocol() const;
  void set_protocol(const std::string& value);
  void set_protocol(std::string&& value);
  void set_protocol(const char* value);
  void set_protocol(const char* value, size_t size);
  std::string* mutable_protocol();
  std::string* release_protocol();
  void set_allocated_protocol(std::string* protocol);
  private:
  const std::string& _internal_protocol() const;
  void _internal_set_protocol(const std::string& value);
  std::string* _internal_mutable_protocol();
  public:

  // @@protoc_insertion_point(class_scope:envoy.tcp.metadataexchange.config.MetadataExchange)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MetadataExchange

// string protocol = 1;
inline void MetadataExchange::clear_protocol() {
  protocol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MetadataExchange::protocol() const {
  // @@protoc_insertion_point(field_get:envoy.tcp.metadataexchange.config.MetadataExchange.protocol)
  return _internal_protocol();
}
inline void MetadataExchange::set_protocol(const std::string& value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:envoy.tcp.metadataexchange.config.MetadataExchange.protocol)
}
inline std::string* MetadataExchange::mutable_protocol() {
  // @@protoc_insertion_point(field_mutable:envoy.tcp.metadataexchange.config.MetadataExchange.protocol)
  return _internal_mutable_protocol();
}
inline const std::string& MetadataExchange::_internal_protocol() const {
  return protocol_.GetNoArena();
}
inline void MetadataExchange::_internal_set_protocol(const std::string& value) {
  
  protocol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MetadataExchange::set_protocol(std::string&& value) {
  
  protocol_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:envoy.tcp.metadataexchange.config.MetadataExchange.protocol)
}
inline void MetadataExchange::set_protocol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:envoy.tcp.metadataexchange.config.MetadataExchange.protocol)
}
inline void MetadataExchange::set_protocol(const char* value, size_t size) {
  
  protocol_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:envoy.tcp.metadataexchange.config.MetadataExchange.protocol)
}
inline std::string* MetadataExchange::_internal_mutable_protocol() {
  
  return protocol_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MetadataExchange::release_protocol() {
  // @@protoc_insertion_point(field_release:envoy.tcp.metadataexchange.config.MetadataExchange.protocol)
  
  return protocol_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MetadataExchange::set_allocated_protocol(std::string* protocol) {
  if (protocol != nullptr) {
    
  } else {
    
  }
  protocol_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol);
  // @@protoc_insertion_point(field_set_allocated:envoy.tcp.metadataexchange.config.MetadataExchange.protocol)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace config
}  // namespace metadataexchange
}  // namespace tcp
}  // namespace envoy

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_src_2fenvoy_2ftcp_2fmetadata_5fexchange_2fconfig_2fmetadata_5fexchange_2eproto
